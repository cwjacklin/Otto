!obj:pylearn2.train.Train {
  dataset: &train !obj:pylearn2.datasets.csv_dataset.CSVDataset {
    path: '../../Data/train_pylearn2.csv',
    task: 'classification',
    start_fraction: .8
  }
  ,
  model: !obj:pylearn2.models.mlp.MLP {
    batch_size: 8192,
    layers: [
      !obj:pylearn2.models.mlp.RectifiedLinear {
        layer_name: 'h0',
        dim: 400,
        sparse_init: 15
      },
      !obj:pylearn2.models.mlp.RectifiedLinear {
        layer_name: 'h1',
        dim: 400,
        sparse_init: 15,
      },
      !obj:pylearn2.models.mlp.Softmax {
        layer_name: 'y',
        n_classes: 9,
        irange: 0.05
      }
    ],
    nvis: 93
  }
  ,
  algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
    learning_rate: .17, 
    learning_rule: !obj:pylearn2.training_algorithms.learning_rule.AdaGrad {},
    train_iteration_mode: 'even_shuffled_sequential',
    monitor_iteration_mode: 'even_sequential',
    update_callbacks: [!obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
      decay_factor: 1.001,
      min_lr: .0001,
    }],

    monitoring_dataset: {
      'train': *train,
      'valid': !obj:pylearn2.datasets.csv_dataset.CSVDataset {
        path: '../../Data/train_pylearn2.csv',
        task: 'classification',
        end_fraction: .2
      }
    },
    cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
      input_include_probs: {
        'h0': .8,
      },
      input_scales: {
        'h0': 1.,
      },
    },
    termination_criterion: !obj:pylearn2.termination_criteria.And {
      criteria: [
        !obj:pylearn2.termination_criteria.EpochCounter {
          max_epochs: 1000
        }
      ]
    }
  },
  extensions: [
    !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
      channel_name: 'valid_y_misclass',
      save_path: 'mlp_best.pkl'
    },
  ]
}
